public class Rof
{

  /**
     String fenceF(int) -- iterative fence generator
     precond:  input is a positive integer
     postcond: returns fence with n posts
  **/
  public static String fenceF( int n ) {

    if ( n == 0 ) return "";

    String retStr = "|";

    for( ; n > 1; n--)
      retStr += "--|";

    return retStr;

  }


  /**
     String fenceR(int) -- recursive fence generator
     precond:  input is a positive integer
     postcond: returns fence with n posts
  **/
  public static String fenceR( int n ) {

    if ( n == 0 ) return "";

    String retStr = "|";

    if ( n > 1 ) {
      retStr += "--" + fenceR( n - 1 );
      n--;

    }

    return retStr;

  }


  /**
     String reverseF(String) -- iterative String reverser
     precond:  input String is non-empty
     postcond: returns input String with chars in reverse order
  **/
  public static String reverseF( String s ) {

    String retStr = "";

    for( int i = s.length(); i > 0; i-- ) {
      retStr = s.substring(0,1) + retStr;
      s = s.substring( 1, s.length() );

    }

    return retStr;

  }


  /**
     String reverseF(String) -- recursive String reverser
     precond:  input String is non-empty
     postcond: returns input String with chars in reverse order
  **/
  public static String reverseR( String s ) {

    String retStr = "";

    if ( s.length() > 0 ) {
      retStr = reverseR( s.substring( 1, s.length() ) )
        + s.substring(0,1);

    }

    return retStr;

  }


  public static void main( String[] args ) {

    for( int i = 0; i < 10; i++ ) {
      System.out.println( i + "-post fences: " );
      System.out.println( fenceF(i) );
      System.out.println( fenceR(i) );

    }

    System.out.println( reverseF("stressed") );
    System.out.println( reverseR("stressed") );
    System.out.println( reverseF("abcdefg") );
    System.out.println( reverseR("abcdefg") );
    System.out.println( reverseF("amanaplanacanalPanama") );
    System.out.println( reverseR("amanaplanacanalPanama") );

  }


}
